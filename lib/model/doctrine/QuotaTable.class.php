<?php
/*
 * Copyright (c) 2016, webvariants GmbH <?php Co. KG, http://www.webvariants.de
 *
 * This file is released under the terms of the MIT license. You can find the
 * complete text in the attached LICENSE file or online at:
 *
 * http://www.opensource.org/licenses/mit-license.php
 */

/**
 * QuotaTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class QuotaTable extends Doctrine_Table {

  const STATUS_ORDER = 1;
  const STATUS_OVER = 2;
  const STATUS_CANCELATION = 8;
  const STATUS_BLOCKED = 9;
  const STATUS_ACTIVE = 10;

  static $STATUS_SHOW = array(
      self::STATUS_ORDER => 'ordering',
      self::STATUS_ACTIVE => 'active',
      self::STATUS_OVER => 'over',
      self::STATUS_BLOCKED => 'blocked',
      self::STATUS_CANCELATION => 'cancelation'
  );

  /**
   * Returns an instance of this class.
   *
   * @return QuotaTable The table instance
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Quota');
  }

  public function queryAll() {
    return $this->createQuery('q')->orderBy('id DESC');
  }

  public function queryByCamapaign($campaign_id, $status_exclude = array()) {
    $query = $this
      ->createQuery('q')
      ->where('q.campaign_id = ?', $campaign_id)
      ->orderBy('q.id ASC');

    if ($status_exclude) {
      $query->andWhereNotIn('q.status', $status_exclude);
    }

    return $query;
  }

  /**
   * @param Campaign $campaign
   * @return Quota
   */
  public function activateQuota(Campaign $campaign, $save = true, $notice_ticket = true) {
    $time = time();

    $q = $campaign->getQuota();
    if ($q && !$q->isNew() && $q->getStatus() == self::STATUS_ACTIVE && $q->getEmailsRemaining() > 0 && $q->isInTime($time)) {
      return $q;
    }

    $sqltime = gmdate('Y-m-d', $time);
    $query = $this->queryByCamapaign($campaign->getId())
      ->andWhere('q.emails_remaining > 0')
      ->andWhere('q.status = ?', self::STATUS_ACTIVE)
      ->andWhere('q.start_at <= ?', $sqltime)
      ->andWhere('? <= q.end_at', $sqltime)
      ->orderBy('q.id ASC')
      ->limit(1);

    if ($q && !$q->isNew()) {
      $query->andWhere('q.id != ?', $q->getId());
    }

    $quota = $query->fetchOne();

    if ($quota) {
      $campaign->setQuota($quota);
      if ($save) {
        $campaign->save();
        return $quota;
      }
    }

    $missing_changed = false;
    if ($campaign->getQuotaId()) {
      $campaign->setQuota(null);
      $missing_changed = true;
      if ($save) {
        $campaign->save();
      }
    }

    if ($missing_changed || $notice_ticket === 'force') {
      if ($notice_ticket && $campaign->getBillingEnabled()) {
        $ticket = TicketTable::getInstance()->generate(array(
            TicketTable::CREATE_CAMPAIGN => $campaign,
            TicketTable::CREATE_KIND => $campaign->getOrderId() ? TicketTable::KIND_QUOTA_MISSING_OPEN_ORDER : TicketTable::KIND_QUOTA_MISSING,
            TicketTable::CREATE_CHECK_DUPLICATE => true
        ));
        if ($ticket) {
          $ticket->save();
          $ticket->notifyAdmin();
        }
      }
    }

    return null;
  }

  public function useQuota($quota_id, $emails = 1) {
    if ($quota_id && $emails > 0 && is_int($emails)) {
      $this->getConnection()->exec('update `quota` set emails_remaining = emails_remaining - ? where id = ?', array($emails, $quota_id));
    }
  }

}
